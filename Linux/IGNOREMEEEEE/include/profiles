#!/bin/sh

#################################################################################
#
#   hardeningone
# ------------------
#
# Copyleft GPL3 2010-2011, Mauro Risonho de Paula Assumpcao (mauro.risonho@gmail.com), 
# Web site: 
#
# hardeningone comes with ABSOLUTELY NO WARRANTY. This is free software, and you are
# welcome to redistribute it under the terms of the GNU General Public License.
# See LICENSE file for usage of this software.
#
#################################################################################
#
# Read profile/template
#
#################################################################################
#
    #YYY Enable check when profile files are complete and completely documented
    # Check if default profile is used
    if [ "${PROFILE}" = "defaultXXX.prf" ]; then
#        echo ""
#        echo "      ==============================================================================="
#        echo "        ${WARNING}Warning${NORMAL}: ${WHITE}Default profile wstá sendo usado.${NORMAL}"
#        echo "          O profile padrao contem uma pequena quantidade de opcões e configuracões."
#        echo "          Consulte a documentacao para criar um profile customizado."
#        echo ""
#        echo "      [ ${WHITE}Press [ENTER] para continuar com o profile padrao ou [CTRL] + C para parar${NORMAL} ]"
#        echo "      ==============================================================================="
        wait_for_keypress
    fi

#
#################################################################################
#
    Display --indent 2 --text "" #"- Verificar arquivo de perfil (${PROFILE})..."
    logtext "Lendo Perfil/Configuracao ${PROFILE}"
    FIND=`cat ${PROFILE} | grep '^config:' | sed 's/ /!space!/g'`
    for I in ${FIND}; do
        OPTION=`echo ${I} | cut -d ':' -f2`
        VALUE=`echo ${I} | cut -d ':' -f3 | sed 's/!space!/ /g'`    
    
        logtext "Opcao profile setada: ${OPTION} (com o valor ${VALUE})"

        case ${OPTION} in
	
	    # Maximum number of WAITing connections
	    connections_max_wait_state)
		OPTIONS_CONN_MAX_WAIT_STATE="${VALUE}"
	    ;;
	    
	    # Do not check security repository in sources.list (Debian/Ubuntu)
	    debian_skip_security_repository)
	        OPTION_DEBIAN_SKIP_SECURITY_REPOSITORY="${VALUE}"
    	    ;;

    	    # Skip FreeBSD port audit
	    freebsd_skip_portaudit)
	        logtext "Opcao setada: Saindo FreeBSD portaudit"
	        OPTION_FREEBSD_SKIP_PORTAUDIT="${VALUE}"
	    ;;

	    # Do (not) log tests if they have an different operating system
	    log_tests_incorrect_os)
	        logtext "Opcao setada: No logging for incorrect OS"
		if [ "${VALUE}" = "no" ]; then LOG_INCORRECT_OS=0; else LOG_INCORRECT_OS=1; fi
	    ;;

	    # What type of machine we are scanning (eg. desktop, server, server with storage)
	    machine_role)
		MACHINE_ROLE="${VALUE}"
	    ;;

	    # Define if any found NTP daemon instance is configured as a server or client
	    ntpd_role)
		NTPD_ROLE="${VALUE}"
	    ;;
	    
	    # How much seconds to wait between tests
	    pause_between_tests)
		TEST_PAUSE_TIME="${VALUE}"
	    ;;
	    
	    # Profile name
	    profile_name)
	        # YYY dummy 
	    ;;

	    # Tests to always skip (useful for false positives or problematic tests)
	    test_skip_always)
	        TEST_SKIP_ALWAYS="${VALUE}"
		logtext "Testes que nao foram realizados: ${VALUE}"
    	    ;;	

	    # Do not check the latest version on the internet
	    skip_upgrade_test)
		if [ "${VALUE}" = "yes" -o "${VALUE}" = "YES" ]; then SKIP_UPGRADE_TEST=1; else SKIP_UPGRADE_TEST=0; fi
	    ;;

	    # Define what kind of scan we are performing
	    test_scan_mode)
	        if [ "${VALUE}" = "light" ]; then	     SCAN_TEST_LIGHT="YES";   SCAN_TEST_MEDIUM="NO";   SCAN_TEST_HEAVY="NO";	   fi
		if [ "${VALUE}" = "normal" ]; then	     SCAN_TEST_LIGHT="YES";   SCAN_TEST_MEDIUM="YES";  SCAN_TEST_HEAVY="NO";	   fi
	        if [ "${VALUE}" = "full" ]; then	     SCAN_TEST_LIGHT="YES";   SCAN_TEST_MEDIUM="YES";  SCAN_TEST_HEAVY="YES";	   fi
	    ;;	

	    # Catch all bad options and bail out
	    *)
	        logtext "Unknown option ${OPTION} (with value: ${VALUE})"
	        echo "Fatal error: found errors in profile"
	        echo "Unknown option ${OPTION} found (with value: ${VALUE})"
	        RemovePIDFile    
	        exit 1
	    ;;

        esac
	
    done
#
#################################################################################
#
# Plugins
#
#################################################################################
#
    FIND=`cat ${PROFILE} | grep '^plugin_enable=' | sed 's/ /!space!/g'`
    for I in ${FIND}; do
        PLUGIN=`echo ${I} | cut -d '=' -f2`    
	if [ -f "${PLUGINDIR}/${PLUGIN}" ]; then
            logtext "Plugin Encontrado: ${PLUGIN}"
	    # XXX - enable plugin
	  else
	    logtext "Plugin Nao encontrado: ${PLUGIN} (${PLUGINDIR}/${PLUGIN})"
	fi
    done
#
#################################################################################
#
    # Set default values (only if not configured in profile)

    if [ "${MACHINE_ROLE}" = "" ]; then
        MACHINE_ROLE="server"
	logtext "Set option to default value: MACHINE_ROLE --> ${MACHINE_ROLE}"
    fi

    if [ "${NTPD_ROLE}" = "" ]; then
        NTPD_ROLE="client"
	logtext "Set option to default value: NTPD_ROLE --> ${NTPD_ROLE}"
    fi

#
#################################################################################
#

logtextbreak

#================================================================================
# hardeningone - Copyleft GPL3 2010-2011, Mauro Risonho de Paula Assumpcao -  - 
